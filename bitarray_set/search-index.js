var searchIndex = {};
searchIndex["bitarray_set"] = {"doc":"An implementation of a set using a bit array as an underlying\nrepresentation for holding unsigned numerical elements.","items":[[3,"BitArraySet","bitarray_set","",null,null],[3,"Iter","","An iterator for `BitArraySet`.",null,null],[3,"Union","","",null,null],[3,"Intersection","","",null,null],[3,"Difference","","",null,null],[3,"SymmetricDifference","","",null,null],[11,"clone","","",0,null],[11,"clone_from","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"eq","","",0,null],[11,"new","","Creates a new empty `BitArraySet`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"from_bit_array","","Creates a new `BitArraySet` from the given bit array.",0,{"inputs":[{"name":"bitarray"}],"output":{"name":"self"}}],[11,"from_bytes","","",0,null],[11,"into_bit_array","","Consumes this set to return the underlying bit array.",0,null],[11,"get_ref","","Returns a reference to the underlying bit array.",0,null],[11,"iter","","Iterator over each usize stored in the `BitArraySet`.",0,null],[11,"union","","Iterator over each usize stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",0,null],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place version.",0,null],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place version.",0,null],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric difference of `self` and `other`.\nSee [symmetric_difference_with](#method.symmetric_difference_with) for\nan efficient in-place version.",0,null],[11,"union_with","","Unions in-place with the specified other bit array.",0,null],[11,"intersect_with","","Intersects in-place with the specified other bit array.",0,null],[11,"difference_with","","Makes this bit array the difference with the specified other bit array\nin-place.",0,null],[11,"symmetric_difference_with","","Makes this bit array the symmetric difference with the specified other\nbit array in-place.",0,null],[11,"len","","Returns the number of set bits in this set.",0,null],[11,"is_empty","","Returns whether there are no bits set in this set",0,null],[11,"clear","","Clears all bits in this set",0,null],[11,"contains","","Returns `true` if this set contains the specified integer.",0,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",0,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",0,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",0,null],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",0,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",0,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"next","","",3,null],[11,"size_hint","","",3,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next","","",5,null],[11,"size_hint","","",5,null]],"paths":[[3,"BitArraySet"],[3,"Iter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"]]};
initSearch(searchIndex);
