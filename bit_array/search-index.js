var searchIndex = {};
searchIndex["bit_array"] = {"doc":"Collections implemented with bit arrays.","items":[[3,"BitArray","bit_array","The bitarray type.",null,null],[3,"Iter","","An iterator for `BitArray`.",null,null],[3,"IntoIter","","",null,null],[3,"Blocks","","An iterator over the blocks of a `BitArray`.",null,null],[6,"BitsInOut","","",null,null],[8,"BitsIn","","",null,null],[16,"Output","","",0,null],[11,"index","","",1,null],[11,"new","","Creates an empty `BitArray`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_elem","","Creates a `BitArray`, setting each element\nto `bit`.",1,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from_bytes","","Transforms a byte-array into a `BitArray`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",1,null],[11,"from_fn","","Creates a `BitArray` of the specified length where the value at each index\nis `f(index)`.",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"blocks","","Iterator over the underlying blocks of data",1,null],[11,"storage","","Exposes the raw block storage of this BitArray",1,null],[11,"storage_mut","","Exposes the raw block storage of this BitArray",1,null],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",1,null],[11,"set","","Sets the value of a bit at an index `i`.",1,null],[11,"set_all","","Sets all bits to 1.",1,null],[11,"negate","","Flips all bits.",1,null],[11,"union","","Calculates the union of two bitarrays. This acts like the bitwise `or`\nfunction.",1,null],[11,"intersect","","Calculates the intersection of two bitarrays. This acts like the\nbitwise `and` function.",1,null],[11,"difference","","Calculates the difference between two bitarrays.",1,null],[11,"all","","Returns `true` if all bits are 1.",1,null],[11,"iter","","Returns an iterator over the elements of the array in order.",1,null],[11,"none","","Returns `true` if all bits are 0.",1,null],[11,"any","","Returns `true` if any bit is 1.",1,null],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`BitArray` becomes the high-order bit of the first byte. If the\nsize of the `BitArray` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",1,null],[11,"eq_vec","","Compares a `BitArray` to a slice of `bool`s.\nBoth the `BitArray` and slice must have the same length.",1,null],[11,"len","","Returns the total number of bits in this array",1,null],[11,"clear","","Clears all bits in this array.",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"clone","","",1,null],[11,"clone_from","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"fmt","","",1,null],[11,"hash","","",1,null],[11,"eq","","",1,null],[11,"clone","","",2,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"next_back","","",2,null],[11,"next","","",3,null],[11,"next_back","","",3,null],[11,"into_iter","","",1,null],[11,"clone","","",4,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next_back","","",4,null]],"paths":[[8,"BitsIn"],[3,"BitArray"],[3,"Iter"],[3,"IntoIter"],[3,"Blocks"]]};
initSearch(searchIndex);
